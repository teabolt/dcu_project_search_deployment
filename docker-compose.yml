version: "3.8"
services:
  ##
  # Application services
  ##
  frontend:
    image: tomasbalt/dcu_project_search_frontend:${FE_VERSION}
    environment:
      # Needed before loading variables from env_file
      - NODE_ENV=${NODE_ENV}
    env_file:
      - frontend.env
    # these services will be started before this one
    depends_on:
      - backend
    volumes:
      - frontend:/var/lib/frontend
      # For HTTPS certs
      - ${FRONTEND_SSL_KEY}:${FRONTEND_SSL_KEY}
      - ${FRONTEND_SSL_CERT}:${FRONTEND_SSL_CERT}
    # use host ports
    network_mode: "host"
    # where to write logs
    logging:
      driver: "fluentd"
      options:
        fluentd-address: ${FLUENTD_ADDRESS}
        tag: frontend
        # connect to driver once it is available
        fluentd-async-connect: "true"
  backend:
    image: tomasbalt/dcu_project_search_backend:${BE_VERSION}
    environment:
      # Needed before loading variables from env_file
      - NODE_ENV=${NODE_ENV}
    env_file:
      - backend.env
    volumes:
      - backend:/var/lib/backend
        # For HTTPS certs
      - ${BACKEND_SSL_KEY}:${BACKEND_SSL_KEY}
      - ${BACKEND_SSL_CERT}:${BACKEND_SSL_CERT}
    # use host ports
    network_mode: "host"
    # where to write logs
    logging:
      driver: "fluentd"
      options:
        fluentd-address: ${FLUENTD_ADDRESS}
        tag: backend
        # connect to driver once it is available
        fluentd-async-connect: "true"
  ##
  # Logging and management services
  ##
  # logging driver
  fluentd:
    image: tomasbalt/dcu_project_search_fluentd:${FLUENTD_IMAGE_VERSION}
    environment:
      # Set the name of the fluentd configuration file
      - FLUENTD_CONF=fluentd.conf
      - ES_HOST=${ES_HOST}
    # use host ports
    network_mode: "host"
    ports:
      # HTTP input support
      - "9880:9880"
      # TCP input support
      - "24224:24224"
      - "24224:24224/udp"
  # elasticsearch and logs visualisation app
  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.2
    environment:
      - ELASTICSEARCH_HOSTS=${ES_HOST}
    # use host ports
    network_mode: "host"
    ports:
      - "5601:5601"

volumes:
  frontend:
    driver: local
  backend:
    driver: local
